df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
plot(grid.arrange(p1, p2, ncol = 2))
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Converte Proporcao para numérico
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
#BIBLIOTECAS QUE TENTAREI USAR
library(rio)
library(pliman)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(tibble)
library(tidyr)
library(scales)
#SETAR O DIRETORIO E SETAR OS EXCELS
set_wd_here()
analiseFao <- import(file = "arquivos/FAOSTAT_CO2.xlsx")
analiseBurnedArea <- import(file = "arquivos/Burned_Area.csv")
#Variaveis GLOBAIS
df_fao_humid = data.frame()
df_fao_other = data.frame()
df1 = data.frame()
df2 = data.frame()
nFao= length(analiseFao[[1]])
j=0
teste= data.frame()
#SEPARAR O DATA FRAME EM 2 DATAFRAME DE ACORDO COM AS FORMATIONS
while (j < nFao) {
j = j + 1
if (analiseFao[j,3] == "Other forest"){
df1 = data.frame(analiseFao[j,])
df_fao_other = bind_rows(df_fao_other,df1)
} else {
df2 = analiseFao[j,]
df_fao_humid = bind_rows(df_fao_humid,df2)
}
}
#RESETAR A VAR GLOBAL
j=0
#TRANSFORMAR OS NA EM UNIT PARA KT e nos valores para 0
df_fao_humid[4] <- "kt"
df_fao_other[4] <- "kt"
df_fao_humid[is.na(df_fao_humid)] <- 0
df_fao_other[is.na(df_fao_other)] <- 0
#contar o tamanho do df
nBurn= length(analiseBurnedArea[[1]])
#COLOCAR EM PIVOT LONGER para facilitar a manipulação colunas virarem linhas
long_Fao_Humid <- pivot_longer(
df_fao_humid,
cols = c("2012":"2022"),
names_to = "Ano",
values_to = "Valor"
)
long_Fao_Other <- pivot_longer(
df_fao_other,
cols = c(X2012:X2022),
names_to = "Ano",
values_to = "Valor"
)
#TRANSFORMAR OS VALORES PARA NUMERICO E SOMAR TUDO
long_Fao_Humid$Valor <- as.numeric(long_Fao_Humid$Valor)
df_resumo_FAO_humid <- long_Fao_Humid %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
long_Fao_Other$Valor <- as.numeric(long_Fao_Other$Valor)
df_resumo_FAO_other <- long_Fao_Other %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
#Aqui virou putaria, VAI SOMAR TODOS OS VALORES PARA TER UMA VARIAVEL COM TODOS OS VALORES VAI PUXAR UM MUTATE COM A BIBLIO SCALE PARA TRANSFORMAR EM PORCENTAGEM E POR FINAL VAI ORGANIZAR DE FORMA DECRESCENTE DE ACORDO COM A SOMA DOS VALORES
valor_total_FAO_humid <- sum(df_resumo_FAO_humid$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_humid <- df_resumo_FAO_humid %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_humid), accuracy = 0.01)) %>%
arrange(desc(Soma_Valor))
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor) # Pegar os top 10
valor_total_FAO_other <- sum(df_resumo_FAO_other$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_other <- df_resumo_FAO_other %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_other), accuracy = 0.01))%>%
arrange(desc(Soma_Valor))
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor) # Pegar os top 10
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Converte Proporcao para numérico
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
grid.arrange(p1, p2, ncol = 2)
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
#BIBLIOTECAS QUE TENTAREI USAR
library(rio)
library(pliman)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(tibble)
library(tidyr)
library(scales)
#SETAR O DIRETORIO E SETAR OS EXCELS
set_wd_here()
analiseFao <- import(file = "arquivos/FAOSTAT_CO2.xlsx")
analiseBurnedArea <- import(file = "arquivos/Burned_Area.csv")
#Variaveis GLOBAIS
df_fao_humid = data.frame()
df_fao_other = data.frame()
df1 = data.frame()
df2 = data.frame()
nFao= length(analiseFao[[1]])
j=0
teste= data.frame()
#SEPARAR O DATA FRAME EM 2 DATAFRAME DE ACORDO COM AS FORMATIONS
while (j < nFao) {
j = j + 1
if (analiseFao[j,3] == "Other forest"){
df1 = data.frame(analiseFao[j,])
df_fao_other = bind_rows(df_fao_other,df1)
} else {
df2 = analiseFao[j,]
df_fao_humid = bind_rows(df_fao_humid,df2)
}
}
#RESETAR A VAR GLOBAL
j=0
#TRANSFORMAR OS NA EM UNIT PARA KT e nos valores para 0
df_fao_humid[4] <- "kt"
df_fao_other[4] <- "kt"
df_fao_humid[is.na(df_fao_humid)] <- 0
df_fao_other[is.na(df_fao_other)] <- 0
#contar o tamanho do df
nBurn= length(analiseBurnedArea[[1]])
#COLOCAR EM PIVOT LONGER para facilitar a manipulação colunas virarem linhas
long_Fao_Humid <- pivot_longer(
df_fao_humid,
cols = c("2012":"2022"),
names_to = "Ano",
values_to = "Valor"
)
long_Fao_Other <- pivot_longer(
df_fao_other,
cols = c(X2012:X2022),
names_to = "Ano",
values_to = "Valor"
)
#TRANSFORMAR OS VALORES PARA NUMERICO E SOMAR TUDO
long_Fao_Humid$Valor <- as.numeric(long_Fao_Humid$Valor)
df_resumo_FAO_humid <- long_Fao_Humid %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
long_Fao_Other$Valor <- as.numeric(long_Fao_Other$Valor)
df_resumo_FAO_other <- long_Fao_Other %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
#Aqui virou putaria, VAI SOMAR TODOS OS VALORES PARA TER UMA VARIAVEL COM TODOS OS VALORES VAI PUXAR UM MUTATE COM A BIBLIO SCALE PARA TRANSFORMAR EM PORCENTAGEM E POR FINAL VAI ORGANIZAR DE FORMA DECRESCENTE DE ACORDO COM A SOMA DOS VALORES
valor_total_FAO_humid <- sum(df_resumo_FAO_humid$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_humid <- df_resumo_FAO_humid %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_humid), accuracy = 0.01)) %>%
arrange(desc(Soma_Valor))
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor) # Pegar os top 10
valor_total_FAO_other <- sum(df_resumo_FAO_other$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_other <- df_resumo_FAO_other %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_other), accuracy = 0.01))%>%
arrange(desc(Soma_Valor))
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor) # Pegar os top 10
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos na área de plotagem
grid.arrange(p1, p2, ncol = 2)
View(plot_pizza)
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
view(grid.arrange(p1, p2, ncol = 2))
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
grid.arrange(p1, p2, ncol = 2)
#BIBLIOTECAS QUE TENTAREI USAR
library(rio)
library(pliman)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(tibble)
library(tidyr)
library(scales)
#SETAR O DIRETORIO E SETAR OS EXCELS
set_wd_here()
analiseFao <- import(file = "arquivos/FAOSTAT_CO2.xlsx")
analiseBurnedArea <- import(file = "arquivos/Burned_Area.csv")
#Variaveis GLOBAIS
df_fao_humid = data.frame()
df_fao_other = data.frame()
df1 = data.frame()
df2 = data.frame()
nFao= length(analiseFao[[1]])
j=0
teste= data.frame()
#SEPARAR O DATA FRAME EM 2 DATAFRAME DE ACORDO COM AS FORMATIONS
while (j < nFao) {
j = j + 1
if (analiseFao[j,3] == "Other forest"){
df1 = data.frame(analiseFao[j,])
df_fao_other = bind_rows(df_fao_other,df1)
} else {
df2 = analiseFao[j,]
df_fao_humid = bind_rows(df_fao_humid,df2)
}
}
#RESETAR A VAR GLOBAL
j=0
#TRANSFORMAR OS NA EM UNIT PARA KT e nos valores para 0
df_fao_humid[4] <- "kt"
df_fao_other[4] <- "kt"
df_fao_humid[is.na(df_fao_humid)] <- 0
df_fao_other[is.na(df_fao_other)] <- 0
#contar o tamanho do df
nBurn= length(analiseBurnedArea[[1]])
#COLOCAR EM PIVOT LONGER para facilitar a manipulação colunas virarem linhas
long_Fao_Humid <- pivot_longer(
df_fao_humid,
cols = c("2012":"2022"),
names_to = "Ano",
values_to = "Valor"
)
long_Fao_Other <- pivot_longer(
df_fao_other,
cols = c(X2012:X2022),
names_to = "Ano",
values_to = "Valor"
)
#TRANSFORMAR OS VALORES PARA NUMERICO E SOMAR TUDO
long_Fao_Humid$Valor <- as.numeric(long_Fao_Humid$Valor)
df_resumo_FAO_humid <- long_Fao_Humid %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
long_Fao_Other$Valor <- as.numeric(long_Fao_Other$Valor)
df_resumo_FAO_other <- long_Fao_Other %>%
group_by(Area) %>%
summarize(Soma_Valor = sum(Valor, na.rm = TRUE))
#Aqui virou putaria, VAI SOMAR TODOS OS VALORES PARA TER UMA VARIAVEL COM TODOS OS VALORES VAI PUXAR UM MUTATE COM A BIBLIO SCALE PARA TRANSFORMAR EM PORCENTAGEM E POR FINAL VAI ORGANIZAR DE FORMA DECRESCENTE DE ACORDO COM A SOMA DOS VALORES
valor_total_FAO_humid <- sum(df_resumo_FAO_humid$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_humid <- df_resumo_FAO_humid %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_humid), accuracy = 0.01)) %>%
arrange(desc(Soma_Valor))
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor) # Pegar os top 10
valor_total_FAO_other <- sum(df_resumo_FAO_other$Soma_Valor, na.rm = TRUE)
df_resumo_FAO_other <- df_resumo_FAO_other %>%
mutate(Proporcao = percent((Soma_Valor / valor_total_FAO_other), accuracy = 0.01))%>%
arrange(desc(Soma_Valor))
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor) # Pegar os top 10
# Função para plotar gráficos de pizza com % nas fatias
plot_pizza <- function(df, title) {
# Converte Proporcao para numérico
df <- df %>%
mutate(Proporcao = as.numeric(gsub("%", "", Proporcao)) / 100) # Remove o % e divide por 100
ggplot(df, aes(x = "", y = Proporcao, fill = Area)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = title, x = NULL, y = NULL) +
geom_text(aes(label = paste0(round(Proporcao * 100, 1), "%")), # Adiciona as % no gráfico
position = position_stack(vjust = 0.5), size = 4) +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) # Centraliza o título
}
# Selecionar os top 10 de cada dataframe
df_fao_humid_top10 <- df_resumo_FAO_humid %>%
top_n(10, Soma_Valor)
df_fao_other_top10 <- df_resumo_FAO_other %>%
top_n(10, Soma_Valor)
# Plotar gráficos lado a lado com top 10
p1 <- plot_pizza(df_fao_humid_top10, "Top 10 Países que emitem CO2 (Humid)")
p2 <- plot_pizza(df_fao_other_top10, "Top 10 Países que emitem CO2 (Other)")
# Usar gridExtra para organizar os gráficos
grid.arrange(p1, p2, ncol = 2)
